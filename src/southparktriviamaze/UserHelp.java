/*UserHelp
 * Author: Olin L. Anderson
 * Revision: 1
 * Rev. Author:
 * Description:
 * gives the basic rule of the game and tells the player how to move kenny and what
 * conditions have to be met for Kenny to win the game.
 * 
 */
package southparktriviamaze;

import java.awt.BorderLayout;
import java.awt.Dialog;
import java.awt.FlowLayout;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JTextPane;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.awt.Font;

public class UserHelp extends JDialog {

	private final JPanel contentPanel = new JPanel();
	private JTextPane txtpnHelpCoonNavigate;

	/*
	 * a static help method which can be called at any time to display the help screen
	 * Parameters:
	 * none
	 * Returns:
	 * void
	 * throws:
	 * none
	 */
	public static void help()
	{
		try {
			UserHelp dialog = new UserHelp();
			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			dialog.setModalityType(Dialog.ModalityType.DOCUMENT_MODAL);
			dialog.setModal(true);
			dialog.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}
//	public static void main(String[] args) {
//		try {
//			UserHelp dialog = new UserHelp();
//			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
//			dialog.setVisible(true);
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//	}

	/*
	 * Initalizes he User help Dialog box
	 * this original code for the layout and dialog box was generated by eclipse Window Builder plug in and 
	 * was then modified By Olin L. Anderson for the help screen.
	 */
	public UserHelp() {
		setBounds(100, 100, 450, 300);
		getContentPane().setLayout(new BorderLayout());
		contentPanel.setBackground(Color.GRAY);
		contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		setUndecorated(true);
		setLocationRelativeTo(null);
		getContentPane().add(contentPanel, BorderLayout.CENTER);
		{
			txtpnHelpCoonNavigate = new JTextPane();
			txtpnHelpCoonNavigate.setFont(new Font("Tahoma", Font.BOLD, 13));
			txtpnHelpCoonNavigate.setEditable(false);
			txtpnHelpCoonNavigate.setBackground(Color.GRAY);
			txtpnHelpCoonNavigate.setForeground(Color.YELLOW);
			txtpnHelpCoonNavigate.setText("Help Coon navigate to the end of the Maze\r\n\r\n-To move Coon use the \u201Cw\u201D, \u201Ca\u201D, \u201Cs\u201D, \u201Cd\u201D keys, the arrow keys, or\r\nthe buttons at the bottom right side of the screen when playing.\r\n\r\n-To win the game Coon must reach the bottom right corner of the maze by answering the questions corectly before he runs out of tries.\r\n\r\n-Each time you answer a question incorrectly you lose a try.\r\n\r\n-Questions are True/False, Short Answer, and Multiple Choice\r\n\r\n GOOD LUCK!"
						
						);
		}
		GroupLayout gl_contentPanel = new GroupLayout(contentPanel);
		gl_contentPanel.setHorizontalGroup(
			gl_contentPanel.createParallelGroup(Alignment.LEADING)
				.addComponent(txtpnHelpCoonNavigate, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
		);
		gl_contentPanel.setVerticalGroup(
			gl_contentPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPanel.createSequentialGroup()
					.addComponent(txtpnHelpCoonNavigate, GroupLayout.PREFERRED_SIZE, 327, GroupLayout.PREFERRED_SIZE)
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		contentPanel.setLayout(gl_contentPanel);
		{
			JPanel buttonPane = new JPanel();
			buttonPane.setBackground(Color.GRAY);
			buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));
			getContentPane().add(buttonPane, BorderLayout.SOUTH);
			{
				JButton okButton = new JButton("OK");
				okButton.setForeground(Color.YELLOW);
				okButton.setBackground(Color.GRAY);
				/*
				 * exits out of the help screen when the ok button is pressed.
				 * Parameters:
				 * none
				 * Returns:
				 * none
				 * throws:
				 * none
				 */
				okButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent arg0) {
						contentPanel.setVisible(false);
						dispose();
					}
				});
				okButton.setActionCommand("OK");
				buttonPane.add(okButton);
				getRootPane().setDefaultButton(okButton);
				pack();
				okButton.requestFocusInWindow();
			}
		}
	}

}
